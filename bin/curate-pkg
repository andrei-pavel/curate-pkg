#!/bin/bash

# Copyright (C) 2017 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

# Fail script if any command fails.
set -e

# Needs to run as root but keep ${home}
(( EUID != 0 )) && exec sudo -- "${0}" "${@}" --home ${HOME}

# Print usage function.
printUsage() {
cat <<EOF
Usage: $(basename "${0}") [options]
Options:
  [-d|--debug]    Enable debug.
  [-h|--help]     Display this help.
  [-a|--auto]     Cool continuous curation
EOF
}

cleanup() {
  ${cleanup_added_sources}
  stop_spinner ${?} &> /dev/null
}

# Traps
# shellcheck disable=SC2154
trap 'return_code=${?}; trap - EXIT; cleanup; echo EXIT ${return_code}' EXIT
trap 'return_code=${?}; trap - EXIT; cleanup; echo HUP ${return_code}' HUP
trap 'return_code=${?}; trap - EXIT; cleanup; echo INT ${return_code}' INT
trap 'return_code=${?}; trap - EXIT; cleanup; echo QUIT ${return_code}' QUIT
trap 'return_code=${?}; trap - EXIT; cleanup; echo PIPE ${return_code}' PIPE
trap 'return_code=${?}; trap - EXIT; cleanup; echo TERM ${return_code}' TERM
trap 'trap - EXIT; cleanup; echo SIGINT' SIGINT
trap 'trap - EXIT; cleanup; echo SIGQUIT' SIGQUIT

# Get script path and append it to PATH so other scripts are callable.
script_path="$(dirname "$(readlink -f "${0}")")"
PATH="${PATH}:${script_path}"

# Parse arguments.
auto=false
home="${HOME}"
while [[ ${#} -ge 1 ]]; do
  # Debug mode
  if [[ "${1}" == "-d" || "${1}" == "--debug" ]]; then
    shift
    set -x
    continue
  fi
  # Help: display usage
  if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
    shift
    printUsage
    exit 0
  fi
  # auto
  if [[ "${1}" == "-a" || "${1}" == "--auto" ]]; then
    shift
    auto=true
    continue
  fi
  # home, used when recalling this script with EUID
  if [[ "${1}" == "--home" ]]; then
    shift
    home="${1}"
    shift
    continue
  fi
  # Unrecognized argument.
  printf "\e[1m\e[31mERROR: Unrecognized argument %s.\e[0m\e[0m\n" "${1}" >&2
  printUsage
  exit 1
done

source "${script_path}/../share/curate-pkg/spinner.sh"

package_managers=$(cat <<EOF
apt
eopkg
EOF
)

optional_package_managers=$(cat <<EOF
flatpak
npm
snap
EOF
)

found=false
for package_manager in ${package_managers}; do
  if command -v ${package_manager} 1> /dev/null; then
    found=true
    break
  fi
done

if ! ${found}; then
  printf "Warning: your package manager is not supported. Send the following output to the developer:\n%s\n" "$(lsb_release -a 2> /dev/null)" >&2
  exit 2
fi

if ! command -v jq &> /dev/null; then
  ${install} jq
fi

source "${script_path}/../share/curate-pkg/spinner.sh"

header() {
  local title=${1}
  local cols=$(tput cols)
  local half_cols=$((cols / 2 - 12 ))
  for (( i=0; i < ${half_cols}; i++ )); do
    printf "#"
  done
  printf " %s " "${title}"
  for (( i=0; i < ${half_cols}; i++ )); do
    printf "#"
  done
  printf "\n"
}

# shellcheck disable=SC2068
while true; do
  for package_manager in ${package_managers} ${optional_package_managers}; do
    if ! command -v ${package_manager} 1> /dev/null; then
      continue
    fi
    header ${package_manager}
    source "${script_path}/../share/curate-pkg/${package_manager}.sh"
    # Find out what there is to be done.
    keys=("$(jq -r '.["keys"][]?' < "${config}")")
    repositories=("$(jq -r '.["repositories"][]?' < "${config}")")
    sources=()
    for (( i=0; ; i++ )); do
      src="$(jq -r '.["sources"]'[${i}] < "${config}")"
      if [[ ${src} == null ]]; then
        break
      fi
        sources+=( "${src}" )
    done
    installables=("$(jq -r '.["installables"][]?' < "${config}")")
    wgetables=("$(jq -r '.["wgetables"][]?' < "${config}")")
    purgeables=("$(jq -r '.["purgeables"][]?' < "${config}")")
    commands=()
    for (( i=0; ; i++ )); do
      cmd="$(jq -r '.["commands"]'[${i}] < "${config}")"
      if [[ ${cmd} == null ]]; then
        break
      fi
        commands+=( "${cmd}" )
    done

    # Do.
    start_spinner "Adding keys..."
    for key in ${keys[@]}; do
      wget -q -O - "${key}" | ${add_key} - &> /dev/null
    done
    stop_spinner ${?}

    start_spinner "Adding repositories..."
    for repository in ${repositories[@]}; do
      ${add_repository} "${repository}" &> /dev/null
    done
    stop_spinner ${?}

    start_spinner "Adding sources..."
    ${cleanup_added_sources}
    for src in "${sources[@]}"; do
      protocolless_src=$(echo "${src}" | cut -d '/' -f 3-)
      if ! /bin/grep -F "$(echo "${protocolless_src}")" ${source_files} > /dev/null; then
        eval ${add_source} "${src}" > /dev/null
      fi
    done
    stop_spinner ${?}

    start_spinner "Updating repositories..."
    ${update} > /dev/null
    stop_spinner ${?}

    start_spinner "Installing..."
    for package in ${installables[@]}; do
      set +e
      ${check_package} "${package}" &> /dev/null
      return_code=${?}
      set -e
      if [[ ${return_code} -ne 0 ]]; then
        ${install} "${package}" || true
      fi
    done
    stop_spinner ${?}

    start_spinner "wgetting..."
    for wget in ${wgetables[@]}; do
      name=$(echo ${wget} | cut -d '/' -f 3 | cut -d '.' -f 2)
      directory="/usr/local/${name}"
      if [[ ! -d ${directory} ]]; then
        mkdir --parents ${directory}
        file=$(mktemp --dry-run --tmpdir=${directory})
        wget -q -O "${file}" "${wget}"
        filetype=$(file "${file}")
        if echo ${filetype} | /bin/grep -Ec "gzip|Zip" &> /dev/null; then
            pushd ${directory}
            {
              unp "${file}" > /dev/null
            }
            popd
        else
          ${manual_install} "${file}" > /dev/null
        fi
        rm "${file}"
      fi
    done
    stop_spinner ${?}

    start_spinner "Purging..."
    for package in ${purgeables[@]}; do
      set +e
      ${check_package} "${package}" &> /dev/null
      return_code=${?}
      set -e
      if [[ ${return_code} -eq 0 ]]; then
        ${purge} "${package}" > /dev/null
      fi
    done
    stop_spinner ${?}

    start_spinner "Running custom commands..."
    for cmd in "${commands[@]}"; do
      ${cmd}
    done
    stop_spinner ${?}

    ${upgrade}
    ${autoremove}
    ${upgrade_os} || true
    ${cleanup_added_sources}
  done
  if ! ${auto}; then
    break
  fi
  sleep 1h
done

