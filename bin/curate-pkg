#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

# Fail script if any command fails.
set -e

# Print usage function.
printUsage() {
printf "\
Usage: $(basename "${0}") [options]
Options:
  [-d|--debug]    Enable debug.
  [-h|--help]     Display this help.
  [-a|--auto]     Cool continuous curation
  [-v|--verbose]  Verbose output
"
}

# Traps
# shellcheck disable=SC2154
trap 'return_code=${?}; trap - EXIT; echo EXIT ${return_code}' EXIT
trap 'return_code=${?}; trap - EXIT; echo HUP ${return_code}' HUP
trap 'return_code=${?}; trap - EXIT; echo INT ${return_code}' INT
trap 'return_code=${?}; trap - EXIT; echo QUIT ${return_code}' QUIT
trap 'return_code=${?}; trap - EXIT; echo PIPE ${return_code}' PIPE
trap 'return_code=${?}; trap - EXIT; echo TERM ${return_code}' TERM
trap 'trap - EXIT; echo SIGINT' SIGINT
trap 'trap - EXIT; echo SIGQUIT' SIGQUIT

# Get script path and append it to PATH so other scripts are callable.
script_path="$(dirname "$(readlink -f "${0}")")"
PATH="${PATH}:${script_path}"

# Parse arguments.
additional=
auto=false
while [[ ${#} -ge 1 ]]; do
  # Debug mode
  if [[ "${1}" == "-d" || "${1}" == "--debug" ]]; then
    shift
    set -x
    additional+=" -d"
    continue
  fi
  # Help: display usage
  if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
    shift
    printUsage
    exit 0
  fi
  # auto
  if [[ "${1}" == "-a" || "${1}" == "--auto" ]]; then
    shift
    auto=true
    continue
  fi
  # Verbose output
  if [[ "${1}" == "-v" || "${1}" == "--verbose" ]]; then
    shift
    additional+=" -v"
    continue
  fi
  # Unrecognized argument.
  printf "\e[1m\e[31mERROR: Unrecognized argument %s.\e[0m\e[0m\n" "${1}" >&2
  printUsage
  exit 1
done

package_managers=$(cat <<EOF
apt
brew
dnf
eopkg
pacman
EOF
)

optional_package_managers=$(cat <<EOF
flatpak
go
nix
npm
pacaur
snap
yaourt
EOF
)

found=false
for package_manager in ${package_managers}; do
  if command -v ${package_manager} 1> /dev/null; then
    found=true
    break
  fi
done

if ! ${found}; then
  printf "Warning: your package manager is not supported. Send the following output to the developer:\n%s\n" "$(lsb_release -a 2> /dev/null)" >&2
  exit 2
fi

# shellcheck disable=SC2068
while true; do
  for package_manager in ${package_managers} ${optional_package_managers}; do
    if ! command -v ${package_manager} 1> /dev/null; then
      continue
    fi
    if [[ ${package_manager} == "pacaur" ||
          ${package_manager} == "yaourt" ]]; then
      curate-pkg-one ${additional} ${package_manager} || true
    else
      sudo -H curate-pkg-one ${additional} ${package_manager} || true
    fi
  done
  if ! ${auto}; then
    break
  fi
  sleep 1h
done

