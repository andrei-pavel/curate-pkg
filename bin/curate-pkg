#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

# Get script path and append it to PATH so other scripts are callable.
SCRIPT_PATH="$(dirname "$(readlink -f "${0}")")"
PATH="${PATH}:${SCRIPT_PATH}"

# Header
ARGUMENTS="\
  [-a|--auto]                                  Cool continuous curation
  [-i|--install \$package]                      Installs a single package.
  [-k|--add-key \$key]                          Adds a single key.
  [-p|--purge|--remove \$package]               Removes a single package.
  [-r|--add-repository \$repository]            Adds a single repository.
  [-s|--add-source \$source]                    Adds a single source.
  [-u|--upgrade \$package]                      Upgrades a single package.
  [-v|--verbose]                               Verbose output
  [-V|--version]                               Display version and exit.
  \$package_manager                             Run only for this specific package manager.
"
. "${SCRIPT_PATH}/../share/curate-pkg/lib/header"
. "${SCRIPT_PATH}/../share/curate-pkg/lib/utils"

# Parse arguments.
additional=
if [[ "${-}" == *x* ]]; then
  additional+=' -d'
fi
auto=false
while (( ${#} > 0 )); do
  case "${1}" in
  # [-a|--auto]                                  Cool continuous curation
  '-a'|'--auto') auto=true ;;
  # [-i|--install \$package]                      Installs a single package.
  '-i'|'--install');&
  # [-k|--add-key \$key]                          Adds a single key.
  '-k'|'--add-key');&
  # [-p|--purge|--remove \$package]               Removes a single package.
  '-p'|'--purge'|'--remove');&
  # [-r|--add-repository \$repository]            Adds a single repository.
  '-r'|'--add-repository');&
  # [-s|--add-source \$source]                    Adds a single source.
  '-s'|'--add-source');&
  # [-u|--upgrade \$package]                      Upgrades a single package.
  '-u'|'--upgrade')
    additional+=" ${1} ${2}" && shift ;;
  # [-v|--verbose]                               Verbose output
  '-v'|'--verbose') additional+=" ${1}" ;;
  # [-V|--version]                               Display version and exit.
  '-V'|'--version') printf "v1.69\n" && exit 0 ;;
  *)
    # \$package_manager                             Run only for this specific package manager.
    [[ -z "${explicit_package_manager}" ]] && explicit_package_manager="${1}" && shift && continue
    # Unrecognized argument
    printf "${RED}ERROR: Unrecognized argument '%s'${RESET}\\n" "${1}" 1>&2; printUsage; exit 1 ;;
  esac; shift
done

#------------------------------------------------------------------------------#

package_managers=$(cat <<EOF
apt
brew
dnf
eopkg
pacman
EOF
)

optional_package_managers=$(cat <<EOF
PKGBUILDer
aura
auracle
aurman
aurutils
bauerbill
flatpak
go
naaman
nix
npm
package-query
pakku
pikaur
repoctl
snap
trizen
yay
EOF
)

non_privileged_package_managers=$(cat <<EOF
PKGBUILDer
aura
auracle
aurman
aurutils
bauerbill
naaman
package-query
pakku
pikaur
repoctl
trizen
yay
EOF
)

function works_best_non_privileged {
  if [[ "${non_privileged_package_managers}" == *${1}* ]]; then
    return 0
  fi
  return 1
}

while true; do
  for package_manager in ${package_managers} ${optional_package_managers}; do
    if ! command -v ${package_manager} 1> /dev/null || [[ ! -z "${explicit_package_manager}" && "${package_manager}" != "${explicit_package_manager}" ]]; then
      continue
    fi
    found=true
    if (( EUID == 0 )) || works_best_non_privileged ${package_manager}; then
      curate-pkg-one ${additional} ${package_manager} || true
    else
      sudo -H curate-pkg-one ${additional} ${package_manager} || true
    fi
  done
  if ! ${auto}; then
    break
  fi
  sleep 1h
done

if ! ${found}; then
  printf "Warning: your package manager is not supported. Send the following output to the developer:\n%s\n" "$(lsb_release -a 2> /dev/null)" >&2
  exit 2
fi
